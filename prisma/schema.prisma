generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  Routine       Routine[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Exercise {
  id              Int               @id @default(autoincrement())
  name            String
  bodyPart        String
  equipment       String
  gifUrl          String
  target          String
  useful          Boolean           @default(false)
  RoutineExercise RoutineExercise[]
}

model Routine {
  id              Int               @id @default(autoincrement())
  userId          String
  User            User              @relation(fields: [userId], references: [id])
  RoutineExercise RoutineExercise[]
}

model RoutineExercise {
  id         Int      @id @default(autoincrement())
  exerciseId Int
  routineId  Int
  Log        Log[]
  MaxLog     MaxLog?
  Exercise   Exercise @relation(fields: [exerciseId], references: [id])
  Routine    Routine  @relation(fields: [routineId], references: [id])
}

model Log {
  id                Int             @id @default(autoincrement())
  date              DateTime
  routineExerciseId Int
  RoutineExercise   RoutineExercise @relation(fields: [routineExerciseId], references: [id])
  Set               Set[]
}

model MaxLog {
  id                Int             @id @default(autoincrement())
  maxWeight         Int
  maxReps           Int
  date              DateTime
  routineExerciseId Int             @unique
  RoutineExercise   RoutineExercise @relation(fields: [routineExerciseId], references: [id])
}

model Set {
  id     Int @id @default(autoincrement())
  weight Int
  reps   Int
  logId  Int
  Log    Log @relation(fields: [logId], references: [id])
}
