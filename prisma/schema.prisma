
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  routines      Routine[]
  sessions      Session[]
}

model Routine {
  id               Int               @id @default(autoincrement())
  userId           String
  createdAt        DateTime          @default(now()) @db.Timestamptz(3)
  user             User              @relation(fields: [userId], references: [id])
  routineExercises RoutineExercise[]
}

model Exercise {
  id               Int               @id @default(autoincrement())
  name             String
  bodyPart         String
  equipment        String
  gifUrl           String
  target           String
  useful           Boolean           @default(false)
  routineExercises RoutineExercise[]
}

model RoutineExercise {
  id         Int      @id @default(autoincrement())
  routineId  Int
  exerciseId Int
  logs       Log[]
  maxLog     MaxLog?
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  routine    Routine  @relation(fields: [routineId], references: [id])
}

model Log {
  id                Int             @id @default(autoincrement())
  date              DateTime
  routineExerciseId Int
  createdAt         DateTime        @default(now()) @db.Timestamptz(3)
  routineExercise   RoutineExercise @relation(fields: [routineExerciseId], references: [id])
  sets              Set[]
}

model Set {
  id        Int @id @default(autoincrement())
  weight    Int
  setNumber Int
  reps      Int
  logId     Int
  log       Log @relation(fields: [logId], references: [id])
}

model MaxLog {
  id                Int             @id @default(autoincrement())
  maxWeight         Int
  maxReps           Int
  date              DateTime
  routineExerciseId Int             @unique
  routineExercise   RoutineExercise @relation(fields: [routineExerciseId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}